//Approach-1  ->  Time complexity : O(sqrt(n))

class Solution {
public:
    int kthFactor(int n, int k) {
        float root = sqrt(n);
        
        for(int i = 1; i<root; i++) {
            if(n%i == 0) {
                k--;
                if(k == 0)
                    return i;
            }
        }
        
        for(int i = root; i>0; i--) {
            if(n%i == 0) {
                k--;
                if(k == 0)
                    return n/i;
            }
        }
        return -1;
    }
};

//Approach-2  ->  Time complexity : O(n)
class Solution {
public:
    int kthFactor(int n, int k) {
        int count = 0;
        int i = 1;
        for(;i<=n; i++) {
            if(n%i == 0) {
                count++;
                if(count==k)
                    break;
            }
        }
        return count<k?-1:i;
    }
};
